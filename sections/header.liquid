<header class="header"> 
    <div class="header-top" data-header>
        <div class="container">
            <button class="nav-open-btn" aria-label="open menu" data-nav-toggler>
               <span class="line line-1"></span>
               <span class="line line-2"></span>
               <span class="line line-3"></span>
            </button>
            <a href="/" class="logo"  >
              {% assign default_width = 69 %}
              {% assign default_height = 26 %}
              {% assign scaled_width = default_width | times: section.settings.logo_scale %}
              {% assign scaled_height = default_height | times: section.settings.logo_scale %}
                {% if section.settings.logo_image != blank %}
                  <img 
                    src="{{ section.settings.logo_image | image_url  }}"  
                    alt="logo"
                    width="{{ scaled_width }}" 
                    height="{{ scaled_height }}" 
                    loading="lazy"
                  />
                 {% else %}
                  <img src="{{ 'MainLogo_png.svg' | asset_url }}" alt="logo" width="69" height="26"  loading="lazy"/>
                {% endif %} 
              </a>

            <nav class="navbar">
              <ul class="navbar-list">
                  {% for link in linklists['main-menu'].links %}
                    <li class="navbar-link has-after">{{link.title | link_to: link.url}}</li>
                   {% endfor %}
              </ul>
            </nav>

            <div class="header-actions" id='headerActions'>
                <a href="#" class="header-action-btn" aria-label="favourite-item" id="search-icon">
                  <ion-icon name="search-outline" aria-hidden="true"></ion-icon>
                </a> 
                <button class="header-action-btn" aria-label="cart-item" onclick="openCart()">
                    <ion-icon name="bag-handle-outline"  aria-hidden="true" aria-hidden="true" onclick="toggleCartbar()"></ion-icon>
                    <span class="btn-badge">0</span>
                </button>
                <a href="/account/login" class="header-action-btn" aria-label="user" >
                    <ion-icon name="person-outline" aria-hidden="true"></ion-icon>
                </a> 
            </div>
        </div>  
    </div>
</header> 



    <!-- MODAL-->
     <div id="myModal" class="modal"> 
        <div class="modal-content">         
               <a href="#" class="logo">
                 <img src="./assets/images/MainLogo.png.svg" />
               </a>
               <div id="login">
                  <form >
                      <label>Username or Email</label>
                      <input />
                      <label>Password</label>
                      <input/>
                      <p>Not a member? <a href="#" onclick="toggleForm('register')">Create an account</a></p>
                      <!-- <button type="submit">Login</button> -->
                  </form>
               </div>

              <div id="register" class='hidden'>
                <form >
                   <label>First Name</label>
                   <input />
                   <label>Last Name</label>
                   <input />
                   <label>Email</label>
                   <input />
                   <label>Password</label>
                    <input/>
                    <label>Confirm Password</label>
                   <input />
                   <p>Already registered? <a href="#" onclick="toggleForm('login')">Log in</a></p>
                   <!-- <button type="submit">Login</button> -->
                 </form>
              </div>
        </div>   
     </div> 

 <!--MOBILE NAvBAR-->
    <div class="sidebar">
          <div class="mobile-navbar" data-navbar>
            <div class="wrapper">
                <a href="/" class="logo">
                  <img src="{{'MainLogo_png.svg' | asset_url}}" width="60" height="26" alt="Glowing">
              </a>

              <button class="nav-close-btn" data-nav-toggler>
                  <ion-icon name="close-outline" aria-hidden="true" ></ion-icon>
              </button>
            </div>

            <ul class="navbar-list">
              {% for link in linklists['main-menu'].links %}
                <li class="navbar-link" data-nav-link>{{link.title | link_to: link.url}}</li>
              {% endfor %}
            </ul>
          </div>
          <div class="overlay" data-nav-toggler data-overlay>
          </div>
    </div>


      <!--
          ADD CART SIDEBAR
      -->
      {% render 'cart-detail' %}

       
    <!-- SEARCH BAR TOP -->
    <div id="search-bar" class="search-bar">
       <input type="text" id="search-input" placeholder="Search for products...">
       <div id="search-results"></div>
    </div>





  <script>
        document.getElementById('search-input').addEventListener('input', function() {
              const query = this.value.trim();
              const searchResultsContainer = document.getElementById('search-results');
          
              if (query.length > 2) {  // Start searching after at least 3 characters
                  fetch(`/search/suggest.json?q=${encodeURIComponent(query)}&resources[type]=product`)
                      .then(response => response.json())
                      .then(data => {
                          const results = data.resources.results.products;
                          let resultsHTML = '';
          
                          if (results.length) {
                              results.forEach(product => {
                                  resultsHTML += `
                                      <div class="search-result-item">
                                          <a href="${product.url}">
                                              <img src="${product.image}" alt="${product.title}">
                                              <div>
                                                  <p>${product.title}</p>
                                                  <p>${product.price}</p>
                                              </div>
                                          </a>
                                      </div>
                                  `;
                              });
                          } else {
                              resultsHTML = '<p>No products found</p>';
                          }
          
                          searchResultsContainer.innerHTML = resultsHTML;
                      })
                      .catch(error => {
                          console.error('Error fetching search results:', error);
                          searchResultsContainer.innerHTML = '<p>There was an error retrieving search results.</p>';
                      });
              } else {
                  searchResultsContainer.innerHTML = '';  // Clear results if query is too short
              }
            });
          

          function debounce(func, delay) {
            let timeout;
            return function() {
                const context = this;
                const args = arguments;
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(context, args), delay);
            };
        }
        
        document.getElementById('search-input').addEventListener('input', debounce(function() {
            // Fetch logic here
        }, 300));
        
            //NEEW
        document.getElementById('search-icon').addEventListener('click', function(event) {
              event.preventDefault();
              const searchBar = document.getElementById('search-bar');
              searchBar.classList.toggle('active');
        });

        document.addEventListener('scroll', function(event) {
            event.preventDefault();
            const searchBar = document.getElementById('search-bar');
            searchBar.classList.remove('active');
        });
        
          
        document.getElementById('search-input').addEventListener('input', function() {
            const query = this.value.trim();
        
            if (query.length > 2) {
                fetch(`/search?q=${encodeURIComponent(query)}&view=json`)
                    .then(response => response.json())
                    .then(data => {
                        const resultsContainer = document.getElementById('search-results');
                        resultsContainer.innerHTML = '';
        
                        if (data.results.length > 0) {
                            data.results.forEach(product => {
                                const productHTML = `
                                    <div class="search-result-item">
                                        <a href="${product.url}">
                                            <img src="${product.image}" alt="${product.title}">
                                            <p>${product.title}</p>
                                        </a>
                                    </div>
                                `;
                                resultsContainer.innerHTML += productHTML;
                            });
                        } else {
                            resultsContainer.innerHTML = '<p>No products found.</p>';
                        }
                    })
                    .catch(error => console.error('Error:', error));
            }
        });
    
        function updateCartCount() {
          fetch('/cart.js')
            .then(response => response.json())
            .then(cart => {
              // Update the span with class btn-badge with the cart's item count
              document.querySelector('.btn-badge').textContent = cart.item_count;
            })
            .catch(error => console.error('Error fetching cart data:', error));
        }
        
        // Call the function when the page loads
        document.addEventListener('DOMContentLoaded', function () {
          updateCartCount();
        });
        
        // Listen for a custom event when the cart is updated
        document.addEventListener('cart:updated', function() {
          updateCartCount();
        });
        







       function fetchCart() {
          // Fetch the cart data from Shopify's cart API
          fetch('/cart.js')
            .then(response => {
              if (!response.ok) {
                throw new Error('Network response was not ok');
              }
              return response.json();
            })
            .then(cart => {
              // Call updateCartUI with the fetched cart data
              updateCartUI(cart);
            })
            .catch(error => {
              console.error('Error fetching cart:', error);
            });
        }
        
        function updateCartUI(cart) {
          var cartContent = document.getElementById('cart-content');
          cartContent.innerHTML = ''; // Clear existing content
          
          if (cart.item_count > 0) {
            var cartHTML = `
            <div style="display: flex; flex-direction: column;">
              <h1>Cart</h1>
              <form action="/cart" method="post" novalidate>`;
            
            let subtotal = 0;
            cart.items.forEach(function(item, index) {
              const itemPrice = item.price / 100;  // Convert cents to dollars
              const initialTotalPrice = itemPrice * item.quantity;
              subtotal += initialTotalPrice;
              const safeItemId = `item_${item.key.replace(/[^a-zA-Z0-9_-]/g, '')}`;
        
              cartHTML += `
              <div style="display:flex; padding:20px; margin-bottom:1rem;" id="${safeItemId}">
                <div style="flex:1; display:flex; align-items:center; justify-content:center;">
                  <a href="${item.url}">
                    <img src="${item.image}" alt="${item.title}" class="img-cover" width="480" height="640" loading="lazy">
                  </a>
                </div>
                <div style="flex:1; display:flex; flex-direction:column;">
                  <div style="flex:1; display:flex; justify-content:space-between">
                    <a href="${item.url}" style="font-size:1.5rem;">${item.product_title}</a>
                    <a href="#" class="remove-item" data-line="${index + 1}" data-key="${item.key}" style="color: black;">
                      <ion-icon name="close-circle-outline"></ion-icon>
                    </a>
                  </div>
                  <div>
                    <p style="font-size:1.5rem;">${currency_code}${itemPrice.toFixed(2)}</p>
                    <p id="line_price_${item.key}" style="font-size:1.5rem;">Total: ${currency_code}${initialTotalPrice.toFixed(2)}</p>
                  </div>
                  <input type="number" name="updates[]" id="updates_${item.key}" value="${item.quantity}" min="0" style="display:none;">
                  <div class="quantity-selector" style="flex:1; display:flex; align-items:center; justify-content:center;">
                    <button type="button" class="decrement" id="decrement_${item.key}">-</button>
                    <span id="quantity_${item.key}">${item.quantity}</span>
                    <button type="button" class="increment" id="increment_${item.key}">+</button>
                  </div>
                </div>
              </div>`;
            });
        
            cartHTML += `
              <div>
                <p id="subtotal">Subtotal: ${currency_code}${subtotal.toFixed(2)}</p>
                <button type="submit" name="update">Update</button>
                <button type="submit" name="checkout" class="btn btn-primary">Checkout</button>
              </div>
            </form>
            </div>`;
        
            cartContent.innerHTML = cartHTML;
        
            // Add event listeners for increment and decrement buttons
            cart.items.forEach(function(item, index) {
              const decrementButton = document.getElementById(`decrement_${item.key}`);
              const incrementButton = document.getElementById(`increment_${item.key}`);
              const quantityDisplay = document.getElementById(`quantity_${item.key}`);
              const quantityInput = document.getElementById(`updates_${item.key}`);
              const linePriceDisplay = document.getElementById(`line_price_${item.key}`);
              const subtotalDisplay = document.getElementById('subtotal');
              const safeItemId = `item_${item.key.replace(/[^a-zA-Z0-9_-]/g, '')}`;
        
              function updatePriceAndQuantity(newQuantity) {
                const newLinePrice = (item.price * newQuantity) / 100;
                quantityDisplay.textContent = newQuantity;
                quantityInput.value = newQuantity;
                linePriceDisplay.textContent = `Total: ${currency_code}${newLinePrice.toFixed(2)}`;
        
                // Update the subtotal
                subtotal += (newLinePrice - (item.price * item.quantity) / 100);
                subtotalDisplay.textContent = `Subtotal: ${currency_code}${subtotal.toFixed(2)}`;
                item.quantity = newQuantity; // Update item quantity 
              }
        


              
              decrementButton.addEventListener('click', function() {
                let currentQuantity = parseInt(quantityInput.value, 10);
                if (currentQuantity > 1) {
                  currentQuantity--;
                  updatePriceAndQuantity(currentQuantity);
                }
              });
        
              incrementButton.addEventListener('click', function() {

                let currentQuantity = parseInt(quantityInput.value, 10); 
                currentQuantity++;
                updatePriceAndQuantity(currentQuantity);
              });
        
              // Handle item removal
              const removeButton = document.querySelector(`.remove-item[data-key="${item.key}"]`);
        
              removeButton.addEventListener('click', function(e) {
                 e.preventDefault();
                  removeCartItem(safeItemId, index +1);
               });
             });
          } else {
            cartContent.innerHTML = '<h2>Cart</h2><p>Cart is empty</p>';
          }

         function removeCartItem(safeItemId, line) {
            console.log(`Attempting to remove item with ID: ${safeItemId}`);
            const itemElement = document.getElementById(safeItemId);
            if (itemElement) {
              fetch(`/cart/change.js`, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({
                  line: line,
                  quantity: 0
                })
              })
              .then(response => response.json())
              .then(updatedCart => {
                itemElement.remove();
                updateSubtotal();
              })
              .catch(error => {
                console.error('Error removing item from cart:', error);
              });
            } else {
              console.error(`Element with ID ${safeItemId} not found.`);
            }
        
        }
       function updateSubtotal() {
          let subtotal = 0; // Initialize the subtotal
          
          // Iterate over all items in the cart to calculate the new subtotal
          cart.items.forEach(item => {
            const quantityInput = document.getElementById(`updates_${item.key}`); 
            
            if (quantityInput) {
              // Get the current quantity from the input field
              let currentQuantity = parseInt(quantityInput.value, 10);
              if (isNaN(currentQuantity) || currentQuantity < 0) {
                currentQuantity = 0; // Handle cases where the input is not a valid number
              }
        
              // Calculate the price for this item
              const itemSubtotal = (item.price * currentQuantity) / 100;
              subtotal += itemSubtotal; // Add this item's subtotal to the total
               item.quantity = currentQuantity; 
            }
          });
        
          // Update the subtotal display
          let subtotalDisplay = document.getElementById('subtotal');
          subtotalDisplay.textContent = `Subtotal: ${currencySymbol}${subtotal.toFixed(2)}`;
        } 
      
        

      }
        
      
         
         

        function openCart() {
          document.getElementById('myModal2').style.display = 'flex';
          fetchCart();
        }

       fetchCart()  
        
  </script>
      
 <style>
  .header-top{
    background-color:{{section.settings.bg_color}};
  }


  
   /* Search bar styling */
.search-bar {
  display: none;
  position: fixed;
  top: 20;
  left: 0;
  width: 100%;
  background-color: #fff;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  padding: 10px 20px;
  z-index: 1000;
  transition: transform 0.3s ease-in-out;
  transform: translateY(-100%);
}

.search-bar.active {
  display: block;
  transform: translateY(0);
}

#search-input {
  width: 100%;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
}


#search-input::placeholder{
  font-size:14px;
}






#search-container {
    position: relative;
}

#search-results {
    position: absolute;
    top: 100%;
    left: 0;
    width: 100%;
    background-color: white;
    border: 1px solid #ddd;
    z-index: 1000;
    max-height: 300px;
    overflow-y: auto;
}

.search-result-item {
    padding: 10px;
    border-bottom: 1px solid #ddd;
    display: flex;
    align-items: center;
}

.search-result-item img {
    max-width: 50px;
    margin-right: 10px;
}

.search-result-item p {
    margin: 0;
}











.quantity-selector {
    display: flex;
    align-items: center;
}

.quantity-selector button {
    background-color: #f0f0f0;
    border: none;
    padding: 8px 12px;
    cursor: pointer;
    font-size: 16px;
}

.quantity-selector #quantity_{{ item.key }} {
    margin: 0 10px;
    font-size: 16px;
}

</style>
{% schema %}
{
  "name": "header",
  "settings": [
    {
      "type": "color",
      "id": "bg_color",
      "label": "Background",
      "default": "#FFFFFF"
     },
     {
      "type": "image_picker",
      "id": "logo_image",
      "label": "Logo Image"
    },
    {
      "type": "range",
      "id": "logo_scale",
      "label": "Logo Scale",
      "min": 0.5,
      "max": 2,
      "step": 0.1,
      "default": 1
    }
  ],
  "blocks": [],
  "presets": [
    {
      "name": "header"
    }
  ]
}
{% endschema %}